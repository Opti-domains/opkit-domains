{
  "language": "Solidity",
  "sources": {
    "contracts/Lock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.24;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"
    },
    "contracts/OpkitDomains.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract OpkitDomains {\r\n    // Domain struct to store the owner and the records\r\n    struct Domain {\r\n        address owner;\r\n        mapping(string => string) stringRecords;\r\n    }\r\n\r\n    // Mapping from domain name to Domain struct\r\n    mapping(string => Domain) private domains;\r\n\r\n    // Event emitted when a domain is registered\r\n    event DomainRegistered(string domain, address owner);\r\n\r\n    // Event emitted when a string record is updated\r\n    event StringRecordUpdated(string domain, string key, string newValue);\r\n\r\n    // Modifier to check if the sender is the owner of the domain\r\n    modifier onlyOwner(string memory domain) {\r\n        require(domains[domain].owner == msg.sender, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    // Function to register a new domain\r\n    function register(string memory domain, address owner, string[] memory keys, string[] memory values) public {\r\n        require(domains[domain].owner == address(0), \"Domain already registered\");\r\n        domains[domain].owner = owner;\r\n        emit DomainRegistered(domain, owner);\r\n\r\n        uint256 keysLength = keys.length;\r\n        require(keysLength == values.length, \"Not eq length\");\r\n\r\n        unchecked {\r\n            for (uint256 i = 0; i < keysLength; i++) {\r\n                domains[domain].stringRecords[keys[i]] = values[i];\r\n                emit StringRecordUpdated(domain, keys[i], values[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Function to update the string record of an existing domain\r\n    function updateStringRecord(string memory domain, string memory key, string memory value) public onlyOwner(domain) {\r\n        domains[domain].stringRecords[key] = value;\r\n        emit StringRecordUpdated(domain, key, value);\r\n    }\r\n\r\n    // Function to get the string record of a domain\r\n    function getStringRecord(string memory domain, string memory key) public view returns (string memory) {\r\n        return domains[domain].stringRecords[key];\r\n    }\r\n\r\n    // Function to get the owner of a domain\r\n    function getDomainOwner(string memory domain) public view returns (address) {\r\n        return domains[domain].owner;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "shanghai",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}